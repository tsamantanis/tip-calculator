{"version":3,"sources":["components/TipCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["TipCalculator","useState","bill","setBill","tip","setTip","split","setSplit","tipAmount","className","for","id","name","type","min","value","onChange","e","target","max","toFixed","parseFloat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOA2DeA,MAzDf,WAA2B,IAAD,EACEC,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,OAEAF,mBAAS,IAFT,mBAEfG,EAFe,KAEVC,EAFU,OAGIJ,mBAAS,IAHb,mBAGfK,EAHe,KAGRC,EAHQ,KAKlBC,EAAaJ,EAAM,IAAOF,EAC9B,OACI,sBAAKO,UAAU,OAAf,UACI,iCACI,sBAAKA,UAAU,aAAf,UACI,uBAAOC,IAAI,OAAX,kBACA,uBACA,uBACIC,GAAG,OACHC,KAAK,OACLC,KAAK,UACLC,IAAI,IACJC,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAQc,EAAEC,OAAOH,aAG1C,sBAAKN,UAAU,aAAf,UACI,uBAAOC,IAAI,MAAX,mBACA,uBACA,uBACIC,GAAG,MACHC,KAAK,MACLC,KAAK,UACLC,IAAI,IACJK,IAAI,MACJJ,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAOY,EAAEC,OAAOH,aAGzC,sBAAKN,UAAU,aAAf,UACI,uBAAOC,IAAI,QAAX,mBACA,uBACA,uBACIC,GAAG,QACHC,KAAK,QACLC,KAAK,UACLC,IAAI,IACJK,IAAI,MACJJ,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAAOH,gBAI/C,sBAAKN,UAAU,UAAf,UACI,8CAAkBD,EAAUY,QAAQ,MACpC,yCAAsB,KAATlB,GAAemB,WAAWnB,GAAQmB,WAAWb,IAAYY,QAAQ,GAAK,KACnF,oDAAkC,KAAVd,EAAee,YAAYA,WAAWnB,GAAQmB,WAAWb,IAAcF,GAAOc,QAAQ,GAAK,EAAnH,c,MCxCDE,MARf,WACI,OACI,qBAAKb,UAAU,MAAf,SACI,cAAC,EAAD,OCIGc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.badd1f32.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction TipCalculator () {\n    const [bill, setBill] = useState('')\n    const [tip, setTip] = useState('')\n    const [split, setSplit] = useState('')\n\n    let tipAmount = (tip / 100) * bill;\n    return (\n        <div className=\"main\">\n            <form>\n                <div className=\"input-item\">\n                    <label for=\"bill\">Bill</label>\n                    <br />\n                    <input\n                        id=\"bill\"\n                        name=\"bill\"\n                        type=\"decimal\"\n                        min=\"0\"\n                        value={bill}\n                        onChange={(e) => setBill(e.target.value)}\n                    />\n                </div>\n                <div className=\"input-item\">\n                    <label for=\"tip\">Tip %</label>\n                    <br />\n                    <input\n                        id=\"tip\"\n                        name=\"tip\"\n                        type=\"decimal\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={tip}\n                        onChange={(e) => setTip(e.target.value )}\n                    />\n                </div>\n                <div className=\"input-item\">\n                    <label for=\"split\">Split</label>\n                    <br />\n                    <input\n                        id=\"split\"\n                        name=\"split\"\n                        type=\"decimal\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={split}\n                        onChange={(e) => setSplit(e.target.value )}\n                    />\n                </div>\n            </form>\n            <div className=\"results\">\n                <h2>Tip Amount: { tipAmount.toFixed(2) }</h2>\n                <h2>Total: { bill !== '' ? (parseFloat(bill) + parseFloat(tipAmount)).toFixed(2) : 0}</h2>\n                <h2>Price per person: { split !== '' ? parseFloat((parseFloat(bill) + parseFloat(tipAmount)) / split).toFixed(2) : 0 } </h2>\n            </div>\n        </div>\n    );\n}\n\nexport default TipCalculator;\n","import React, { Component } from 'react'\nimport TipCalculator from './components/TipCalculator';\n\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TipCalculator />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}